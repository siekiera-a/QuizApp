{"version":3,"sources":["GameContext.tsx","theme.ts","api.ts","components/Question.tsx","components/ScoreView.tsx","components/Submit.tsx","components/Game.tsx","components/QuizRow.tsx","components/QuizList.tsx","components/CodePanel.tsx","components/Leaderboard.tsx","components/ErrorPage.tsx","components/QuestionMaker.tsx","components/CreateQuiz.tsx","components/MenuView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["State","darkTheme","palette","type","lightTheme","apiUrl","fetchApi","url","a","fetch","response","json","data","ok","Error","message","toString","fetchPostApi","headers","Headers","append","method","body","JSON","stringify","responseData","defaultValue","game","undefined","gameState","NotStarted","startGame","code","Promise","resolve","endGame","error","errorMessage","answerTheQuestion","id","answers","hasNextQuestion","getQuestion","reject","clearErrors","submitAnswers","user","gameContext","createContext","Provider","saveQuiz","sessionStorage","setItem","questionNumber","GameContextProvider","children","useState","setGame","setErrorMessage","setError","loadQuiz","quizString","getItem","g","parse","state","InProgress","quiz","gameCode","loaded","questions","length","requestData","value","removeItem","newGame","filter","x","question","useStyles","makeStyles","theme","answer","marginBottom","cursor","display","marginTop","flexWrap","flexDirection","index","marginRight","active","backgroundColor","primary","main","textAlign","Question","text","onSubmit","classes","map","answersStatus","setAnswersStatus","useEffect","open","setOpen","handleClose","Container","maxWidth","Card","CardContent","Typography","variant","align","className","onClick","status","newArray","toggleStatus","Button","size","color","selectedAnswers","Snackbar","autoHideDuration","onClose","Alert","severity","wrapper","ScoreView","score","scoreInPercent","total","useContext","paragraph","Math","round","container","justifyContent","alignItems","input","width","card","margin","progress","Submit","useRef","setScore","loading","setLoading","TextField","label","inputRef","current","username","trim","then","result","CircularProgress","center","Game","setQuestion","nextQuestion","setNextQuestion","submitted","setSubmitted","q","catch","e","console","log","finally","createStyles","link","textDecoration","QuizRow","prop","date","Date","creationTime","format","Intl","DateTimeFormat","timeStyle","dateStyle","TableRow","TableCell","author","description","getQuizzes","page","QuizList","setPage","quizzes","setQuizzes","TableContainer","Table","TableHead","TableBody","items","TablePagination","component","rowsPerPageOptions","rowsPerPage","onChangePage","count","gap","marginLeft","loader","CodePanel","showLeaderboard","getCode","event","reason","inputProps","maxLength","success","header","background","default","Leaderboard","closeLeaderboard","leaderboard","setLeaderboard","scores","s","datetime","ErrorPage","flex","button","QuestionMaker","onQuestionCreated","questionInput","multiline","fullWidth","onChange","target","some","correct","List","ListItem","ListItemIcon","Checkbox","edge","checked","handleCheckboxClick","ListItemText","ListItemSecondaryAction","IconButton","handleDeleteClick","divider","close","position","right","top","CreateQuiz","onCreate","setQuiz","setErrorMassage","handleErrorClose","join","handleAuthorChange","handleDescriptionChange","i","handleDeleteQuestion","AlertTitle","MenuView","show","newCode","setNewCode","handleCloseAlert","Dialog","fullScreen","App","savedTheme","localStorage","setTheme","appTheme","createMuiTheme","ThemeProvider","CssBaseline","newTheme","newThemeString","WbSunny","style","fill","NightsStay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.333d3818.chunk.js","sourcesContent":["import { createContext, useState } from 'react';\nimport { fetchApi, fetchPostApi } from './api';\nimport { IAnswerData, IAnswerRequest } from './RequestApiModels';\nimport {\n  IQuestion,\n  IQuizQuestions,\n  ISubmitResponse,\n} from './ResponseApiModels';\n\ninterface IGame {\n  quiz: IQuizQuestions;\n  data: IAnswerData[];\n  state: State;\n}\n\nexport enum State {\n  NotStarted,\n  InProgress,\n}\n\ninterface IGameContext {\n  game?: IGame;\n  gameState: State;\n  startGame(code: string): Promise<boolean>;\n  endGame(): void;\n  error: boolean;\n  errorMessage: string;\n  answerTheQuestion(id: number, answers: number[]): void;\n  hasNextQuestion(): boolean;\n  getQuestion(): Promise<IQuestion | undefined>;\n  clearErrors(): void;\n  submitAnswers(user: string): Promise<ISubmitResponse | undefined>;\n}\n\nconst defaultValue: IGameContext = {\n  game: undefined,\n  gameState: State.NotStarted,\n  startGame: (code: string) => new Promise((resolve) => resolve(false)),\n  endGame: () => void 0,\n  error: false,\n  errorMessage: '',\n  answerTheQuestion: (id: number, answers: number[]) => void 0,\n  hasNextQuestion: () => false,\n  getQuestion: () => new Promise((resolve, reject) => resolve(undefined)),\n  clearErrors: () => void 0,\n  submitAnswers: (user: string) =>\n    new Promise((resolve, reject) => resolve(undefined)),\n};\n\nexport const gameContext = createContext<IGameContext>(defaultValue);\n\nconst { Provider } = gameContext;\n\ninterface IContextProviderProps {\n  children?: React.ReactNode;\n}\n\nconst saveQuiz = (code: string, game: IGame) => {\n  sessionStorage.setItem(code, JSON.stringify(game));\n};\n\nlet questionNumber = 0;\nlet code: string = '';\n\nexport function GameContextProvider({ children }: IContextProviderProps) {\n  const [game, setGame] = useState<IGame>();\n  const [errorMessage, setErrorMessage] = useState('');\n  const [error, setError] = useState(false);\n\n  const loadQuiz = async (): Promise<boolean> => {\n    const quizString = sessionStorage.getItem(code);\n\n    if (quizString) {\n      const g = JSON.parse(quizString) as IGame;\n      g.data = [];\n      g.state = State.InProgress;\n      setGame(g);\n      saveQuiz(code, g);\n      return true;\n    } else {\n      const url = `/quiz/${code}`;\n      try {\n        const response: IQuizQuestions = await fetchApi<IQuizQuestions>(url);\n\n        const g = {\n          quiz: response,\n          data: [],\n          state: State.InProgress,\n        };\n\n        setGame(g);\n        saveQuiz(code, g);\n        return true;\n      } catch (e) {\n        setError(true);\n        setErrorMessage(e.message);\n      }\n    }\n\n    return false;\n  };\n\n  const startGame = async (gameCode: string): Promise<boolean> => {\n    code = gameCode;\n    const loaded = await loadQuiz();\n    questionNumber = 0;\n    return loaded;\n  };\n\n  const endGame = () => {\n    setError(false);\n    setErrorMessage('');\n    setGame(undefined);\n    sessionStorage.removeItem(code);\n    code = '';\n  };\n\n  const getQuestion = async (): Promise<IQuestion | undefined> => {\n    if (!hasNextQuestion()) {\n      return undefined;\n    }\n\n    const url = `/quiz/question/${game?.quiz.questions[questionNumber]}`;\n    try {\n      return await fetchApi<IQuestion>(url);\n    } catch (e) {\n      setError(true);\n      setErrorMessage(e.message);\n      return undefined;\n    }\n  };\n\n  const hasNextQuestion = (): boolean => {\n    if (!game || questionNumber >= game.quiz.questions.length) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const answerTheQuestion = (id: number, answers: number[]) => {\n    if (game) {\n      const newGame: IGame = {\n        quiz: game.quiz,\n        data: [\n          ...game.data.filter((x) => x.question !== id),\n          { question: id, answers },\n        ],\n        state: game.state,\n      };\n\n      setGame(newGame);\n      saveQuiz(code, newGame);\n      questionNumber++;\n    }\n  };\n\n  const submitAnswers = async (\n    user: string\n  ): Promise<ISubmitResponse | undefined> => {\n    if (game && user.length > 0) {\n      const url = `/submit/${game.quiz.id}`;\n      const requestData: IAnswerRequest = {\n        user,\n        data: game.data,\n      };\n      try {\n        const response = await fetchPostApi<ISubmitResponse>(url, requestData);\n        return response;\n      } catch (e) {\n        setError(true);\n        setErrorMessage(e.message);\n      }\n    }\n    return undefined;\n  };\n\n  const clearErrors = () => {\n    setError(false);\n    setErrorMessage('');\n  };\n\n  return (\n    <Provider\n      value={{\n        game,\n        gameState: game?.state || State.NotStarted,\n        startGame,\n        endGame,\n        error,\n        errorMessage,\n        getQuestion,\n        hasNextQuestion,\n        answerTheQuestion,\n        clearErrors,\n        submitAnswers,\n      }}\n    >\n      {children}\n    </Provider>\n  );\n}\n","import { ThemeOptions } from '@material-ui/core/styles'\n\nexport const darkTheme: ThemeOptions = {\n  palette: {\n    type: 'dark'\n  }\n}\n\nexport const lightTheme: ThemeOptions = {\n  palette: {\n    type: 'light'\n  }\n}\n","import { IError } from \"./ResponseApiModels\";\n\nconst apiUrl = 'http://localhost:5000/api'\n\nexport async function fetchApi<T>(url: string): Promise<T> {\n  url = apiUrl + url\n\n  try {\n    const response: Response = await fetch(url);\n    const data: T | IError = await response.json()\n\n    if (response.ok) {\n      return data as T\n    }\n\n    throw new Error((data as IError).message)\n  } catch (e) {\n    throw new Error(e.toString())\n  }\n}\n\nexport async function fetchPostApi<T>(url: string, data: any): Promise<T> {\n  url = apiUrl + url\n\n  const headers = new Headers()\n  headers.append('Content-Type', 'application/json')\n  try {\n    const response: Response = await fetch(url, {\n      method: 'POST', body: JSON.stringify(data), headers\n    })\n\n    const responseData: T | IError = await response.json()\n\n    if (response.ok) {\n      return responseData as T\n    }\n\n    throw new Error((responseData as IError).message)\n  } catch (e) {\n    throw new Error(e.toString())\n  }\n}\n\n","import {\n  Button,\n  Card,\n  CardContent,\n  Container,\n  makeStyles,\n  Snackbar,\n  Theme,\n  Typography,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport React, { useEffect, useState } from 'react';\nimport { IQuestion } from '../ResponseApiModels';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  answer: {\n    marginBottom: '15px',\n    cursor: 'pointer',\n    '&:last-child': {\n      marginBottom: '0px',\n    },\n  },\n  'answers-container': {\n    display: 'flex',\n    marginTop: '30px',\n    flexWrap: 'wrap',\n    flexDirection: 'column',\n  },\n  index: {\n    marginRight: '15px',\n  },\n  active: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  'button-wrapper': {\n    marginTop: '20px',\n    textAlign: 'center',\n  },\n}));\n\ninterface IProp {\n  onSubmit(question: number, answers: number[]): void;\n}\n\nconst Question = ({ id, text, answers, onSubmit }: IQuestion & IProp) => {\n  const classes = useStyles();\n\n  const [answersStatus, setAnswersStatus] = useState(() =>\n    answers.map(({ id, text }) => ({\n      id,\n      text,\n      active: false,\n    }))\n  );\n\n  useEffect(() => {\n    setAnswersStatus(\n      answers.map(({ id, text }) => ({\n        id,\n        text,\n        active: false,\n      }))\n    );\n  }, [id, answers]);\n\n  const [open, setOpen] = useState(false);\n\n  const toggleStatus = (index: number) => {\n    const status = answersStatus[index].active;\n    const newArray = [...answersStatus];\n    newArray[index].active = !status;\n    setAnswersStatus(newArray);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = () => {\n    const selectedAnswers = answersStatus.filter((a) => a.active);\n\n    if (selectedAnswers.length === 0) {\n      setOpen(true);\n    } else {\n      onSubmit(\n        id,\n        selectedAnswers.map((x) => x.id)\n      );\n    }\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Card>\n        <CardContent>\n          <Typography variant=\"h5\" align=\"center\">\n            {text}\n          </Typography>\n        </CardContent>\n      </Card>\n\n      <div className={classes['answers-container']}>\n        {answersStatus.map((a, index) => (\n          <Card\n            className={\n              a.active ? `${classes.active} ${classes.answer}` : classes.answer\n            }\n            key={a.id}\n            onClick={() => toggleStatus(index)}\n          >\n            <CardContent>\n              <Typography variant=\"h6\">\n                <span className={classes.index}>{`${index + 1}.`}</span>\n                {a.text}\n              </Typography>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className={classes['button-wrapper']}>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          color=\"secondary\"\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n      </div>\n\n      <Snackbar open={open} autoHideDuration={3500} onClose={handleClose}>\n        <Alert severity=\"info\" onClose={handleClose}>\n          At least one answer is correct!\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default Question;\n","import {\n  CardContent,\n  Typography,\n  Card,\n  Container,\n  Button,\n  makeStyles,\n} from '@material-ui/core';\nimport React, { useContext } from 'react';\nimport { gameContext } from '../GameContext';\nimport { ISubmitResponse } from '../ResponseApiModels';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    marginTop: '20px',\n    textAlign: 'center',\n  },\n});\n\nconst ScoreView = ({ score, scoreInPercent, total, user }: ISubmitResponse) => {\n  const classes = useStyles();\n  const { endGame } = useContext(gameContext);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" align=\"center\" paragraph={true}>\n            Congrats {user}!\n          </Typography>\n          <Typography variant=\"h5\" align=\"center\">\n            Your score is {`${score}/${total}`}. It's{' '}\n            {Math.round(scoreInPercent)}%\n          </Typography>\n\n          <div className={classes.wrapper}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              size=\"large\"\n              onClick={endGame}\n            >\n              Close quiz\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n\nexport default ScoreView;\n","import {\n  Button,\n  Card,\n  CardContent,\n  makeStyles,\n  TextField,\n  CircularProgress,\n} from '@material-ui/core';\nimport React, { useContext, useRef, useState } from 'react';\nimport { gameContext } from '../GameContext';\nimport { ISubmitResponse } from '../ResponseApiModels';\nimport ScoreView from './ScoreView';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  input: {\n    width: '320px',\n    marginRight: '30px',\n  },\n  card: {\n    maxWidth: '500px',\n    margin: 'auto',\n  },\n  progress: {\n    textAlign: 'center',\n    marginTop: '30px',\n  },\n});\n\nconst Submit = () => {\n  const input = useRef<HTMLInputElement>(null);\n  const classes = useStyles();\n  const { submitAnswers } = useContext(gameContext);\n  const [score, setScore] = useState<ISubmitResponse>();\n  const [loading, setLoading] = useState(false);\n\n  const handleClick = () => {\n    if (input.current) {\n      const username: string = input.current.value.trim();\n      if (username.length > 0) {\n        input.current.value = '';\n        setLoading(true);\n        submitAnswers(username).then((result) => {\n          if (result) {\n            setScore(result);\n          }\n          setLoading(false);\n        });\n      }\n    }\n  };\n\n  if (score) {\n    return (\n      <ScoreView\n        score={score.score}\n        scoreInPercent={score.scoreInPercent}\n        total={score.total}\n        user={score.user}\n      />\n    );\n  }\n\n  return (\n    <Card className={classes.card}>\n      <CardContent className={classes.container}>\n        <TextField\n          label=\"Your username\"\n          variant=\"outlined\"\n          inputRef={input}\n          className={classes.input}\n          color=\"secondary\"\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleClick}\n        >\n          Submit\n        </Button>\n      </CardContent>\n\n      {loading && (\n        <div className={classes.progress}>\n          <CircularProgress />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default Submit;\n","import { CircularProgress, makeStyles } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { gameContext } from '../GameContext';\nimport { IQuestion } from '../ResponseApiModels';\nimport Question from './Question';\nimport Submit from './Submit';\n\nconst useStyles = makeStyles({\n  center: {\n    textAlign: 'center',\n  },\n});\n\nconst Game = () => {\n  const classes = useStyles();\n  const [loading, setLoading] = useState<boolean>();\n  const [question, setQuestion] = useState<IQuestion>();\n  const [nextQuestion, setNextQuestion] = useState<boolean>();\n  const [submitted, setSubmitted] = useState(false);\n\n  const { hasNextQuestion, answerTheQuestion, getQuestion } = useContext(\n    gameContext\n  );\n\n  useEffect(() => {\n    if (hasNextQuestion()) {\n      setLoading(true);\n      getQuestion()\n        .then((q) => {\n          setQuestion(q);\n        })\n        .catch((e) => {\n          console.log(e);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [nextQuestion]);\n\n  const handleSubmit = (question: number, answers: number[]) => {\n    answerTheQuestion(question, answers);\n    if (hasNextQuestion()) {\n      setNextQuestion(true);\n    } else {\n      setSubmitted(true);\n    }\n  };\n\n  if (submitted) {\n    return <Submit />;\n  }\n\n  return loading ? (\n    <div className={classes.center}>\n      <CircularProgress />\n    </div>\n  ) : (\n    <>\n      {question && (\n        <Question\n          id={question.id}\n          answers={question.answers}\n          text={question.text}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Game;\n","import {\n  TableRow,\n  TableCell,\n  makeStyles,\n  Theme,\n  createStyles,\n} from '@material-ui/core';\nimport { IQuiz } from '../ResponseApiModels';\nimport { gameContext } from '../GameContext';\nimport { useContext } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    link: {\n      textDecoration: 'underline',\n      cursor: 'pointer',\n    },\n  })\n);\n\nconst QuizRow = (prop: IQuiz) => {\n  const date = new Date(prop.creationTime);\n  const format = new Intl.DateTimeFormat('pl', {\n    /// @ts-ignore\n    timeStyle: 'short',\n    dateStyle: 'short',\n  });\n\n  const classes = useStyles();\n\n  const { startGame } = useContext(gameContext);\n\n  return (\n    <TableRow>\n      <TableCell>\n        <span onClick={() => startGame(prop.code)} className={classes.link}>\n          {prop.code}\n        </span>\n      </TableCell>\n      <TableCell>{prop.author}</TableCell>\n      <TableCell>{format.format(date)}</TableCell>\n      <TableCell>{prop.description}</TableCell>\n    </TableRow>\n  );\n};\n\nexport default QuizRow;\n","import {\n  Typography,\n  Card,\n  Container,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n  TablePagination,\n  TableCell,\n  CircularProgress,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useEffect, useState } from 'react';\nimport { fetchApi } from '../api';\n\nimport { IGetQuiz } from '../ResponseApiModels';\nimport QuizRow from './QuizRow';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    textAlign: 'center',\n  },\n  margin: {\n    marginTop: '16px',\n  },\n});\n\nconst getQuizzes = async (page: number = 1): Promise<IGetQuiz | undefined> => {\n  const url = `/quiz?page=${page}`;\n  try {\n    const data: IGetQuiz = await fetchApi<IGetQuiz>(url);\n    return data;\n  } catch (e) {\n    console.log(e.message);\n    return undefined;\n  }\n};\n\nconst QuizList = () => {\n  const [page, setPage] = useState(1);\n  const [quizzes, setQuizzes] = useState<IGetQuiz>();\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    getQuizzes(page).then((data) => setQuizzes(data));\n  }, [page]);\n\n  return (\n    <Container maxWidth=\"md\">\n      <Card>\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          paragraph\n          className={classes.margin}\n        >\n          Join to game\n        </Typography>\n\n        {!quizzes ? (\n          <Typography align=\"center\" variant=\"h6\" paragraph>\n            No Quizzes found!\n          </Typography>\n        ) : (\n          <>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Code</TableCell>\n                    <TableCell>Author</TableCell>\n                    <TableCell>Creation Time</TableCell>\n                    <TableCell>Description</TableCell>\n                  </TableRow>\n                </TableHead>\n\n                <TableBody>\n                  {quizzes.items.map((e) => (\n                    <QuizRow\n                      key={e.id}\n                      author={e.author}\n                      code={e.code}\n                      creationTime={e.creationTime}\n                      description={e.description}\n                      id={e.id}\n                    />\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n\n            <TablePagination\n              component=\"div\"\n              rowsPerPageOptions={[10]}\n              rowsPerPage={10}\n              page={page - 1}\n              onChangePage={(e, page) => {\n                setPage(page);\n              }}\n              count={quizzes.total}\n            />\n          </>\n        )}\n      </Card>\n    </Container>\n  );\n};\n\nexport default QuizList;\n","import {\n  TextField,\n  Button,\n  CircularProgress,\n  Snackbar,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Alert } from '@material-ui/lab';\n\nimport React, { useContext, useRef, useState } from 'react';\nimport { gameContext } from '../GameContext';\n\nconst useStyles = makeStyles({\n  center: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '35px',\n  },\n  gap: {\n    marginLeft: '20px',\n  },\n  loader: {\n    marginTop: '20px',\n    textAlign: 'center',\n  },\n});\n\nconst CodePanel = ({\n  showLeaderboard,\n}: {\n  showLeaderboard(code: string): void;\n}) => {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const input = useRef<HTMLInputElement>(null);\n  const { startGame } = useContext(gameContext);\n\n  const getCode = (): string => {\n    if (input.current) {\n      const code = input.current.value.trim();\n      input.current.value = '';\n      return code;\n    }\n    return '';\n  };\n\n  const joinButton = () => {\n    const code = getCode();\n    if (code.length > 0)\n      startGame(code).then((success) => {\n        if (!success) {\n          setOpen(true);\n        }\n        setLoading(false);\n      });\n    setLoading(true);\n  };\n\n  const selectLeaderboard = () => {\n    const code = getCode();\n    if (code.length > 0) {\n      showLeaderboard(code);\n    }\n  };\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <div className={classes.center}>\n        <TextField\n          id=\"code\"\n          label=\"code\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          inputProps={{ maxLength: 8 }}\n          inputRef={input}\n        />\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          color=\"primary\"\n          className={classes.gap}\n          onClick={joinButton}\n        >\n          Join\n        </Button>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          color=\"primary\"\n          className={classes.gap}\n          onClick={selectLeaderboard}\n        >\n          Show Leaderboard\n        </Button>\n      </div>\n      {loading && (\n        <div className={classes.loader}>\n          <CircularProgress />\n        </div>\n      )}\n\n      <Snackbar open={open} onClose={handleClose} autoHideDuration={3500}>\n        <Alert severity=\"error\" onClose={handleClose}>\n          Quiz not found!\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default CodePanel;\n","import {\n  Card,\n  CardContent,\n  Typography,\n  CircularProgress,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Container,\n  makeStyles,\n  Button,\n} from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { fetchApi } from '../api';\nimport { ILeaderboard } from '../ResponseApiModels';\n\ninterface IProps {\n  code: string;\n  closeLeaderboard(): void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    background: theme.palette.background.default,\n  },\n  loader: {\n    textAlign: 'center',\n  },\n  wrapper: {\n    marginTop: '25px',\n    textAlign: 'center',\n  },\n}));\n\nconst Leaderboard = ({ code, closeLeaderboard }: IProps) => {\n  const [leaderboard, setLeaderboard] = useState<ILeaderboard>();\n  const classes = useStyles();\n\n  useEffect(() => {\n    const url = `/leaderboard/${code}`;\n\n    try {\n      const response = fetchApi<ILeaderboard>(url);\n      response.then((x) => setLeaderboard(x)).catch((e) => closeLeaderboard());\n    } catch (e) {\n      closeLeaderboard();\n    }\n  }, [code, closeLeaderboard]);\n\n  const format = new Intl.DateTimeFormat('pl', {\n    /// @ts-ignore\n    timeStyle: 'short',\n    dateStyle: 'short',\n  });\n\n  return leaderboard ? (\n    <Container maxWidth=\"sm\">\n      <Card>\n        <CardContent>\n          <Typography\n            variant=\"h5\"\n            paragraph={true}\n            align=\"center\"\n            color=\"secondary\"\n          >\n            Quiz {leaderboard.code} created by {leaderboard.author} at:\n            {format.format(new Date(leaderboard.creationTime))}\n          </Typography>\n\n          <Typography variant=\"h6\" paragraph={true}>\n            {leaderboard.description}\n          </Typography>\n\n          {leaderboard.scores.length === 0 ? (\n            <Typography variant=\"h6\" paragraph={true} align=\"center\">\n              No one solved this quiz yet!\n            </Typography>\n          ) : (\n            <Table>\n              <TableHead>\n                <TableRow className={classes.header}>\n                  <TableCell>User</TableCell>\n                  <TableCell>Score</TableCell>\n                  <TableCell>Date</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {leaderboard.scores.map((s, index) => (\n                  <TableRow key={index}>\n                    <TableCell>{s.user}</TableCell>\n                    <TableCell>{Math.round(s.score * 100)}%</TableCell>\n                    <TableCell>{format.format(new Date(s.datetime))}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n          <div className={classes.wrapper}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={closeLeaderboard}\n            >\n              Close\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </Container>\n  ) : (\n    <div className={classes.loader}>\n      <CircularProgress />\n    </div>\n  );\n};\n\nexport default Leaderboard;\n","import {\n  Button,\n  Card,\n  CardContent,\n  Container,\n  makeStyles,\n  Typography,\n} from '@material-ui/core';\nimport React, { useContext } from 'react';\nimport { gameContext } from '../GameContext';\n\nconst useStyles = makeStyles({\n  margin: {\n    marginTop: '16px',\n  },\n  wrapper: {\n    textAlign: 'center',\n    marginTop: '20px',\n  },\n});\n\ninterface IProp {\n  message: string;\n}\n\nconst ErrorPage = ({ message }: IProp) => {\n  const classes = useStyles();\n  const { clearErrors } = useContext(gameContext);\n  return (\n    <Container maxWidth=\"md\" className={'box'}>\n      <Card>\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          paragraph={true}\n          className={classes.margin}\n        >\n          Some error occured!\n        </Typography>\n        <CardContent>\n          <Typography variant=\"h6\" paragraph={true}>\n            {message}\n          </Typography>\n          <div className={classes.wrapper}>\n            <Button variant=\"contained\" color=\"primary\" onClick={clearErrors}>\n              OK\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n\nexport default ErrorPage;\n","import {\n  Button,\n  Checkbox,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  makeStyles,\n  TextField,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React, { useRef, useState } from 'react';\nimport { IQuestionData } from '../RequestApiModels';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    marginTop: '15px',\n    display: 'flex',\n  },\n  input: {\n    flex: '1',\n  },\n  button: {\n    marginLeft: '20px',\n  },\n  center: {\n    textAlign: 'center',\n  },\n});\n\nconst defaultValue: IQuestionData = {\n  question: '',\n  answers: [],\n};\n\nconst QuestionMaker = ({\n  onQuestionCreated,\n}: {\n  onQuestionCreated(question: IQuestionData): void;\n}) => {\n  const classes = useStyles();\n  const [question, setQuestion] = useState(defaultValue);\n  const answer = useRef<HTMLInputElement>();\n  const questionInput = useRef<HTMLInputElement>();\n\n  const handleAddClick = () => {\n    const input = answer.current;\n    if (input) {\n      const text = input.value.trim();\n      input.value = '';\n\n      if (text.length > 0 && !question.answers.some((a) => a.text === text)) {\n        setQuestion({\n          question: question.question,\n          answers: [...question.answers, { correct: false, text }],\n        });\n      }\n    }\n  };\n\n  const handleCheckboxClick = (answer: string) => {\n    const answers = question.answers.map((a) => {\n      if (a.text === answer) {\n        return {\n          text: a.text,\n          correct: !a.correct,\n        };\n      } else {\n        return a;\n      }\n    });\n\n    setQuestion({ question: question.question, answers });\n  };\n\n  const handleDeleteClick = (answer: string) => {\n    const answers = question.answers.filter((a) => a.text !== answer);\n    setQuestion({ question: question.question, answers });\n  };\n\n  const onQuestionChange = (text: string) => {\n    setQuestion({\n      question: text.trim(),\n      answers: question.answers,\n    });\n  };\n\n  const handleCreateQuestionButton = () => {\n    if (question.question.length >= 3) {\n      onQuestionCreated(question);\n      setQuestion(defaultValue);\n      if (questionInput.current) {\n        questionInput.current.value = '';\n      }\n    }\n  };\n\n  return (\n    <>\n      <TextField\n        multiline\n        label=\"Question\"\n        color=\"secondary\"\n        fullWidth={true}\n        variant=\"outlined\"\n        inputRef={questionInput}\n        onChange={(e) => onQuestionChange(e.target.value)}\n      />\n      <div className={classes.wrapper}>\n        <TextField\n          label=\"Answer\"\n          color=\"secondary\"\n          className={classes.input}\n          variant=\"outlined\"\n          inputRef={answer}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={handleAddClick}\n        >\n          Add\n        </Button>\n      </div>\n\n      {question.answers.length > 0 && (\n        <>\n          <List>\n            {question.answers.map((a, index) => (\n              <ListItem key={index}>\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={a.correct}\n                    onClick={() => handleCheckboxClick(a.text)}\n                  />\n                </ListItemIcon>\n                <ListItemText>{a.text}</ListItemText>\n                <ListItemSecondaryAction>\n                  <IconButton\n                    edge=\"end\"\n                    onClick={() => handleDeleteClick(a.text)}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n          {question.answers.some((a) => a.correct) &&\n            question.answers.length >= 2 && (\n              <div className={classes.center}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleCreateQuestionButton}\n                >\n                  Create Question\n                </Button>\n              </div>\n            )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default QuestionMaker;\n","import {\n  Card,\n  CardContent,\n  Container,\n  List,\n  ListItemText,\n  makeStyles,\n  TextField,\n  Theme,\n  ListItem,\n  ListItemSecondaryAction,\n  IconButton,\n  Snackbar,\n  Button,\n  CircularProgress,\n} from '@material-ui/core';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloseIcon from '@material-ui/icons/Close';\nimport React, { useState } from 'react';\nimport { IQuestionData, IQuizRequest } from '../RequestApiModels';\nimport QuestionMaker from './QuestionMaker';\nimport { fetchPostApi } from '../api';\nimport { ICode } from '../ResponseApiModels';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  card: {\n    backgroundColor: theme.palette.background.default,\n  },\n  divider: {\n    marginBottom: '25px',\n  },\n  margin: {\n    marginTop: '15px',\n  },\n  wrapper: {\n    marginTop: '25px',\n    textAlign: 'center',\n  },\n  close: {\n    position: 'absolute',\n    right: '15px',\n    top: '15px',\n  },\n}));\n\ninterface IProps {\n  onCreate(code: ICode): void;\n  onClose(): void;\n}\n\nconst defaultValue: IQuizRequest = {\n  author: '',\n  description: '',\n  data: [],\n};\n\nconst CreateQuiz = ({ onCreate, onClose }: IProps) => {\n  const classes = useStyles();\n\n  const [quiz, setQuiz] = useState(defaultValue);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMassage] = useState('');\n\n  const onQuestionCreated = (question: IQuestionData) => {\n    setQuiz({\n      author: quiz.author,\n      description: quiz.description,\n      data: [...quiz.data, question],\n    });\n  };\n\n  const handleDeleteQuestion = (index: number) => {\n    const { author, data, description } = quiz;\n    setQuiz({\n      author,\n      description,\n      data: data.filter((q, i) => i !== index),\n    });\n  };\n\n  const handleAuthorChange = (author: string) => {\n    const { data, description } = quiz;\n    setQuiz({\n      author,\n      data,\n      description,\n    });\n  };\n\n  const handleDescriptionChange = (description: string) => {\n    const { data, author } = quiz;\n    setQuiz({\n      author,\n      data,\n      description,\n    });\n  };\n\n  const handleErrorClose = () => {\n    setError(false);\n    setErrorMassage('');\n  };\n\n  const handleCreateQuiz = () => {\n    if (quiz.author.trim().length <= 2) {\n      setError(true);\n      setErrorMassage('Author name must have at least 3 characters!');\n      return;\n    }\n\n    setLoading(true);\n\n    const url = '/quiz';\n    fetchPostApi<ICode>(url, quiz)\n      .then((x) => {\n        onCreate(x);\n        setQuiz(defaultValue);\n      })\n      .catch((e) => {\n        setError(true);\n        setErrorMassage(e.message);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <Container maxWidth=\"md\" className={classes.margin}>\n      <IconButton className={classes.close} onClick={onClose}>\n        <CloseIcon />\n      </IconButton>\n      <Card className={[classes.card, classes.divider].join(' ')}>\n        <CardContent>\n          <TextField\n            label=\"Author\"\n            color=\"secondary\"\n            variant=\"outlined\"\n            fullWidth={true}\n            onChange={(e) => handleAuthorChange(e.target.value)}\n          ></TextField>\n          <TextField\n            multiline\n            label=\"Description\"\n            color=\"secondary\"\n            fullWidth={true}\n            variant=\"outlined\"\n            className={classes.margin}\n            onChange={(e) => handleDescriptionChange(e.target.value)}\n          />\n        </CardContent>\n      </Card>\n      <Card className={[classes.card, classes.divider].join(' ')}>\n        <CardContent>\n          <QuestionMaker onQuestionCreated={onQuestionCreated} />\n        </CardContent>\n      </Card>\n      {quiz.data.length > 0 && (\n        <>\n          <Card className={classes.card}>\n            <List>\n              {quiz.data.map((q, index) => (\n                <ListItem key={index}>\n                  <ListItemText>{q.question}</ListItemText>\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      onClick={() => handleDeleteQuestion(index)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          </Card>\n          <div className={classes.wrapper}>\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleCreateQuiz}\n            >\n              {loading ? <CircularProgress /> : 'Create Quiz'}\n            </Button>\n          </div>\n        </>\n      )}\n\n      <Snackbar open={error} onClose={handleErrorClose} autoHideDuration={5000}>\n        <Alert severity=\"error\" onClose={handleErrorClose}>\n          <AlertTitle>Error</AlertTitle>\n          {errorMessage}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default CreateQuiz;\n","import React, { useContext, useState } from 'react';\nimport { gameContext, State } from '../GameContext';\nimport Game from './Game';\nimport QuizList from './QuizList';\nimport CodePanel from './CodePanel';\nimport Leaderboard from './Leaderboard';\nimport ErrorPage from './ErrorPage';\nimport { Button, Dialog, makeStyles, Snackbar } from '@material-ui/core';\nimport CreateQuiz from './CreateQuiz';\nimport { ICode } from '../ResponseApiModels';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\ninterface ILeaderboard {\n  show: boolean;\n  code: string;\n}\n\nconst useStyles = makeStyles({\n  wrapper: {\n    textAlign: 'center',\n    marginTop: '20px',\n  },\n});\n\nconst MenuView = () => {\n  const { gameState, error, errorMessage } = useContext(gameContext);\n  const [leaderboard, setLeaderboard] = useState<ILeaderboard>({\n    show: false,\n    code: '',\n  });\n  const [open, setOpen] = useState(false);\n  const [newCode, setNewCode] = useState('');\n\n  const classes = useStyles();\n\n  const showLeaderboard = (code: string) => {\n    setLeaderboard({ show: true, code });\n  };\n\n  const closeLeaderboard = () => {\n    setLeaderboard({ show: false, code: '' });\n  };\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleQuizCreated = (code: ICode) => {\n    setNewCode(code.code);\n    setOpen(false);\n  };\n\n  const handleCloseAlert = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setNewCode('');\n  };\n\n  if (error) {\n    return <ErrorPage message={errorMessage} />;\n  }\n\n  return (\n    <>\n      <div className={'box'}>\n        {gameState === State.NotStarted && (\n          <>\n            {leaderboard.show ? (\n              <Leaderboard\n                code={leaderboard.code}\n                closeLeaderboard={closeLeaderboard}\n              />\n            ) : (\n              <>\n                <QuizList />\n                <CodePanel showLeaderboard={showLeaderboard} />\n                <div className={classes.wrapper}>\n                  <Button\n                    variant=\"contained\"\n                    size=\"large\"\n                    color=\"secondary\"\n                    onClick={handleClick}\n                  >\n                    Create Quiz\n                  </Button>\n                </div>\n                <Dialog open={open} onClose={handleClose} fullScreen>\n                  <CreateQuiz\n                    onClose={handleClose}\n                    onCreate={handleQuizCreated}\n                  />\n                </Dialog>\n              </>\n            )}\n          </>\n        )}\n\n        {gameState === State.InProgress && <Game />}\n      </div>\n\n      <Snackbar open={newCode !== ''} onClose={handleCloseAlert}>\n        <Alert severity=\"success\" onClose={handleCloseAlert}>\n          <AlertTitle>Success</AlertTitle>\n          Quiz created! Code: {newCode}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default MenuView;\n","import React, { useState } from 'react';\nimport { darkTheme, lightTheme } from './theme';\nimport { ThemeOptions } from '@material-ui/core/styles';\n\nimport {\n  createMuiTheme,\n  CssBaseline,\n  Container,\n  IconButton,\n} from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { NightsStay, WbSunny } from '@material-ui/icons';\nimport './app.css';\nimport { GameContextProvider } from './GameContext';\nimport MenuView from './components/MenuView';\n\nconst App = () => {\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n\n    if (savedTheme != null) {\n      return savedTheme === 'dark' ? darkTheme : lightTheme;\n    }\n\n    return darkTheme;\n  });\n\n  const toggleTheme = () => {\n    let newTheme: ThemeOptions;\n    let newThemeString: string;\n\n    if (theme === darkTheme) {\n      newTheme = lightTheme;\n      newThemeString = 'light';\n    } else {\n      newTheme = darkTheme;\n      newThemeString = 'dark';\n    }\n\n    setTheme(newTheme);\n    localStorage.setItem('theme', newThemeString);\n  };\n\n  const appTheme = createMuiTheme(theme);\n\n  return (\n    <ThemeProvider theme={appTheme}>\n      <CssBaseline>\n        <Container>\n          <div className=\"theme-icon\">\n            <IconButton onClick={toggleTheme}>\n              {theme === darkTheme ? (\n                <WbSunny style={{ fill: 'yellow' }} />\n              ) : (\n                <NightsStay style={{ fill: 'black' }} />\n              )}\n            </IconButton>\n          </div>\n\n          <GameContextProvider>\n            <MenuView />\n          </GameContextProvider>\n        </Container>\n      </CssBaseline>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}